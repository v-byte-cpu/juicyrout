// Code generated by MockGen. DO NOT EDIT.
// Source: session.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionManager is a mock of SessionManager interface.
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerMockRecorder
}

// MockSessionManagerMockRecorder is the mock recorder for MockSessionManager.
type MockSessionManagerMockRecorder struct {
	mock *MockSessionManager
}

// NewMockSessionManager creates a new mock instance.
func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &MockSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManager) EXPECT() *MockSessionManagerMockRecorder {
	return m.recorder
}

// DeleteSession mocks base method.
func (m *MockSessionManager) DeleteSession(sessionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteSession", sessionID)
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionManagerMockRecorder) DeleteSession(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionManager)(nil).DeleteSession), sessionID)
}

// GetOrCreateSession mocks base method.
func (m *MockSessionManager) GetOrCreateSession(sessionID string) *proxySession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateSession", sessionID)
	ret0, _ := ret[0].(*proxySession)
	return ret0
}

// GetOrCreateSession indicates an expected call of GetOrCreateSession.
func (mr *MockSessionManagerMockRecorder) GetOrCreateSession(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateSession", reflect.TypeOf((*MockSessionManager)(nil).GetOrCreateSession), sessionID)
}

// GetSession mocks base method.
func (m *MockSessionManager) GetSession(sessionID string) *proxySession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", sessionID)
	ret0, _ := ret[0].(*proxySession)
	return ret0
}

// GetSession indicates an expected call of GetSession.
func (mr *MockSessionManagerMockRecorder) GetSession(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSessionManager)(nil).GetSession), sessionID)
}

// NewSession mocks base method.
func (m *MockSessionManager) NewSession(sessionID string) *proxySession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession", sessionID)
	ret0, _ := ret[0].(*proxySession)
	return ret0
}

// NewSession indicates an expected call of NewSession.
func (mr *MockSessionManagerMockRecorder) NewSession(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockSessionManager)(nil).NewSession), sessionID)
}

// MockSessionDeleter is a mock of SessionDeleter interface.
type MockSessionDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockSessionDeleterMockRecorder
}

// MockSessionDeleterMockRecorder is the mock recorder for MockSessionDeleter.
type MockSessionDeleterMockRecorder struct {
	mock *MockSessionDeleter
}

// NewMockSessionDeleter creates a new mock instance.
func NewMockSessionDeleter(ctrl *gomock.Controller) *MockSessionDeleter {
	mock := &MockSessionDeleter{ctrl: ctrl}
	mock.recorder = &MockSessionDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionDeleter) EXPECT() *MockSessionDeleterMockRecorder {
	return m.recorder
}

// DeleteSession mocks base method.
func (m *MockSessionDeleter) DeleteSession(sessionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteSession", sessionID)
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionDeleterMockRecorder) DeleteSession(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionDeleter)(nil).DeleteSession), sessionID)
}
